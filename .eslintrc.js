// @ts-check

/** @type {import('eslint').Linter.Config} */
const config = {
	env: {
		es2021: true,
		node: true,
		jest: true,
		// // browser: true,
	},
	plugins: [
		'import',
		'unused-imports',
		// // 'no-autofix'
	],
	extends: [
		'eslint:recommended',
		'prettier',
		// // 'react-app',
		// // 'plugin:react/recommended',
		// // 'plugin:react/jsx-runtime',
	],
	parser: '@typescript-eslint/parser',
	parserOptions: {
		ecmaVersion: 'latest',
		sourceType: 'module',
		// // ecmaFeatures: {
		// // 	jsx: true,
		// // },
	},
	rules: {
		indent: ['off', 'tab'],
		'no-console': ['error', { allow: ['warn', 'error', 'info'] }],
		'no-restricted-syntax': [
			'error',
			{
				selector: 'TSEnumDeclaration',
				message: "Don't declare enums. Use POJO with as const instead",
			},
		],
		'no-unused-vars': 'off',
		'unused-imports/no-unused-imports': 'warn',
		'import/extensions': [
			'warn',
			'never',
			{ helpers: 'always', test: 'always', styles: 'always' },
		],
		'import/no-duplicates': 'warn',
		'import/no-default-export': 'error',
		'import/consistent-type-specifier-style': 'error',
		'object-shorthand': ['error', 'always'],
		'no-constant-condition': ['error', { checkLoops: false }],
		'no-restricted-imports': [
			'error',
			{
				patterns: [
					{
						group: ['../*'],
						message: 'Usage of relative parent imports is not allowed.',
					},
				],
			},
		],
		'array-callback-return': ['error', { checkForEach: true }],
		'no-await-in-loop': 'warn',
		'no-constructor-return': 'error',
		'require-atomic-updates': 'error',
		'no-unused-private-class-members': 'warn',
		'no-unreachable-loop': 'error',
		'no-unmodified-loop-condition': 'error',
		'no-template-curly-in-string': 'warn',
		'no-self-compare': 'error',
		'no-promise-executor-return': 'error',
		curly: ['error', 'multi', 'consistent'],
		'default-case-last': 'error',
		eqeqeq: 'error',
		'func-names': ['error', 'never'],
		'func-style': 'error',
		'guard-for-in': 'error',
		'logical-assignment-operators': 'error',
		'max-classes-per-file': 'error',
		'max-depth': 'error',
		'max-lines': ['error', 1000],
		'max-lines-per-function': ['error', 1000],
		'max-nested-callbacks': ['error', 5],
		'max-params': ['error', 5],
		'new-cap': 'error',
		'no-alert': 'error',
		'no-bitwise': 'error',
		'no-caller': 'error',
		'no-confusing-arrow': 'error',
		'id-length': ['error', { min: 2, max: 30, exceptions: ['_'] }],
		'no-div-regex': 'error',
		'no-else-return': ['error', { allowElseIf: false }],
		'no-empty-static-block': 'error',
		'no-eval': 'error',
		'no-extend-native': 'error',
		'no-extra-bind': 'error',
		'no-extra-label': 'error',
		'no-floating-decimal': 'error',
		'no-implicit-coercion': ['error', { disallowTemplateShorthand: true }],
		'no-inline-comments': 'error',
		'no-label-var': 'error',
		'no-labels': ['error', { allowLoop: true, allowSwitch: true }],
		'no-lone-blocks': 'error',
		'no-lonely-if': 'error',
		'prefer-object-spread': 'error',
		'no-multi-assign': 'error',
		'no-multi-str': 'error',
		'no-new': 'error',
		'no-new-object': 'error',
		'no-new-wrappers': 'error',
		'no-octal-escape': 'error',
		'no-param-reassign': 'error',
		'no-return-assign': 'error',
		'no-script-url': 'error',
		'no-sequences': 'error',
		'no-undef-init': 'warn',
		'no-unneeded-ternary': ['error', { defaultAssignment: false }],
		'no-useless-call': 'error',
		'no-useless-computed-key': ['error', { enforceForClassMembers: true }],
		'no-useless-concat': 'error',
		'no-useless-constructor': 'error',
		'no-useless-rename': 'error',
		'no-useless-return': 'error',
		'no-void': 'error',
		'one-var': ['error', 'never'],
		'operator-assignment': 'error',
		'prefer-arrow-callback': 'error',
		'prefer-exponentiation-operator': 'error',
		'prefer-numeric-literals': 'error',
		'prefer-object-has-own': 'error',
		'prefer-promise-reject-errors': 'error',
		'prefer-regex-literals': ['error', { disallowRedundantWrapping: true }],
		'prefer-rest-params': 'error',
		'prefer-spread': 'error',
		'prefer-template': 'error',
		'require-unicode-regexp': 'error',
		'spaced-comment': 'error',
		'symbol-description': 'error',
		yoda: 'error',
	},
	overrides: [
		{
			files: ['**/*.ts', '**/*.tsx'],
			parserOptions: {
				project: './tsconfig.json',
			},
			plugins: ['@typescript-eslint'],
			extends: [
				'plugin:@typescript-eslint/recommended',
				'plugin:@typescript-eslint/recommended-requiring-type-checking',
				'plugin:@typescript-eslint/strict',
			],
			rules: {
				'@typescript-eslint-no-extra-semi': 'off',
				'@typescript-eslint/no-explicit-any': 'off',
				'@typescript-eslint/no-inferrable-types': 'off',
				'no-unused-vars': 'off',
				'@typescript-eslint/no-unused-vars': [
					'warn',
					{
						argsIgnorePattern: '^_',
						destructuredArrayIgnorePattern: '^_',
						caughtErrors: 'all',
					},
				],
				'@typescript-eslint/consistent-type-exports': 'error',
				'@typescript-eslint/consistent-type-imports': 'error',
				'@typescript-eslint/non-nullable-type-assertion-style': 'off',
				'no-constant-condition': 'off',
				'@typescript-eslint/no-unnecessary-condition': [
					'error',
					{
						allowConstantLoopConditions: true,
					},
				],
				'@typescript-eslint/no-confusing-void-expression': [
					'error',
					{
						ignoreArrowShorthand: true,
					},
				],
				'@typescript-eslint/no-require-imports': 'error',
				'@typescript-eslint/no-redundant-type-constituents': 'error',
				'@typescript-eslint/no-useless-empty-export': 'error',
				'@typescript-eslint/prefer-readonly': 'error',
				'@typescript-eslint/switch-exhaustiveness-check': 'error',
				'@typescript-eslint/sort-type-constituents': 'warn',
				'@typescript-eslint/require-array-sort-compare': [
					'error',
					{
						ignoreStringArrays: true,
					},
				],
				'@typescript-eslint/promise-function-async': 'warn',
				'@typescript-eslint/default-param-last': 'warn',
				'no-dupe-class-members': 'off',
				'@typescript-eslint/no-dupe-class-members': 'warn',
				'@typescript-eslint/no-loop-func': 'warn',
				'@typescript-eslint/no-shadow': [
					'error',
					{
						builtinGlobals: true,
					},
				],
				'@typescript-eslint/no-unused-expressions': [
					'error',
					{
						allowShortCircuit: true,
						allowTernary: true,
						enforceForJSX: true,
					},
				],
				'@typescript-eslint/return-await': 'error',
				'no-use-before-define': 'off',
				'@typescript-eslint/no-use-before-define': 'warn',
			},
		},
		{
			files: ['*.test.ts'],
			plugins: ['jest'],
			extends: ['plugin:jest/all'],
			parserOptions: {
				project: ['./tsconfig.json'],
			},
			rules: {
				'jest/prefer-expect-assertions': 'off',
				'jest/require-top-level-describe': 'off',
			},
		},
		// // {
		// // 	files: ['**/*.tsx', '**/*.jsx'],
		// // 	plugins: ['jsx-expressions'],
		// // 	rules: {
		// // 		'no-autofix/jsx-expressions/strict-logical-expressions': 'error',
		// // 		'@typescript-eslint/no-unnecessary-type-constraint': 'off',
		// // 	},
		// // },
	],
	settings: {
		'import/resolver': {
			typescript: {},
		},
		// // react: {
		// // 	version: 'detect',
		// // },
		jest: {
			version: 29,
		},
	},
};

module.exports = config;
